---
layout: post
title:  "8-Bit CPU"
date:   2022-05-14 13:04:54 -0600
categories:
image: /Assets/8BitCPU.jpg
---


- Only use ICs with low-level functionality (logic gates, multiplexors/demultiplexors, counters, registers, buffers, and adders),
- Minimize number of unique parts to allow better price breaks,
- Execute programs at clock speeds of at least 1 MHz,
- User input and output,
- Maximum PCB board size of 150 mm by 150 mm, and
- The program ROM should be programmable independent of an external computer
  (but still have the option to be programmed using an external computer).

The chosen architecture of the CPU includes independent data and memory busses,
which are 8-bits and 16-bits, respectively. Using two busses has the benefit
compared to a single bus in allowing simultaneous control of the data and
memory. This reduces the number microsteps per instruction compared to a single
bus architecture, reducing the overall computation time. Since this CPU uses a
wide variety of instructions, it can be categorized as a complex instruction set
computer (CISC) as opposed to a reduced instruction set computer (RISC), which
is more common today. A CISC architecture is the natural starting point for a
relatively simple CPU since it limits the length of the assembly code required
to run a program. The initial inspiration for my design came from the work of
Ben Eater.

{% pdf "/Assets/8BitCPU_Schematic.pdf" no_link width=100% %}

You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
